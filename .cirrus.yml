env: # Environment variables to pass to all tasks
    CIRRUS_CLONE_DEPTH: 1 # No need to clone with the whole history
    CIRRUS_WORKING_DIR: "/tmp/ci" # Where to clone the aosp-builder repo

    # For rclone with google drive or any cloud! After first commit pushing, login to https://cirrus-ci.com , click top left corner 3 dot menu, click repository(yourname/aosp-builder) > Repository Settings > Secured Variables > enter content of ~/.config/rclone/rclone.conf (from pc where you setup rclone) > ENCRYPT, copy that ENCRYPTED hash
    # ENCRYPTED variables is unique for every repository, so you cant use my one, create you rclone config https://rclone.org/drive/#making-your-own-client-id
    rclone_config: "ENCRYPTED[1f152d7445cdb14babd2bfbf91391a29cd5a2705125d472a7a913ec880780ef5e402a72dcb9547ce00f78dbab276da33]"
    bot_api: "ENCRYPTED[bf57f6c631364712eaf1e135a9f13e235ed1614af30208ee70cff28c8d3f6fe0dbdb79675cc020454eeeeb99bb80d4be]"
    tg_id: "ENCRYPTED[a46f98acdd9fac34550236ff8d9fde6f44eae8c06a7c166b2d2a9e0521b7742ee6c11de92dc82287a5c32b7d3f56c6fa]"

task:
    name: derpfest # Project name
    timeout_in: 120m # Otherwise it will timeout at 60m automatically, 120m highest in free account
    container:
      dockerfile: Dockerfile # It has built-in setup environment + repo, aria2, rclone, pigz, username ci, and email ci@ci.ci [You can use your own docker image if you want, or you can use this one too!]
      cpu: 8  #8 or less cpu for dummy build, 8 cpu for the final build, 8cpu highest for free accounts. Don't try to use more than 8cpu as free user, you may get blocked by ci.
      memory: 32G # So that we can have ram when needed, 32G highest

    download_ccache_background_script: # To download ccache in background
     - ./download_ccache # Ccache download script
    sync_script: # To sync source
      - ./sync # Source sync script
    monitor_background_script: # To monitor ccache and machine status every minute, runs in background
      - ./monitor # Monitor script
    build_script: # Actual build script foreground
      - ./build # Build script to run
    upload_ccache_script: # Upload ccache to cloud foreground
      - ./upload_ccache # Ccache uploading script
