env: # Environment variables to pass to all tasks
    CIRRUS_CLONE_DEPTH: 1 # No need to clone with the whole history
    CIRRUS_WORKING_DIR: "/tmp/ci" # Where to clone the aosp-builder repo

    # For rclone with google drive or any cloud! After first commit pushing, login to https://cirrus-ci.com , click top left corner 3 dot menu, click repository(yourname/aosp-builder) > Repository Settings > Secured Variables > enter content of ~/.config/rclone/rclone.conf (from pc where you setup rclone) > ENCRYPT, copy that ENCRYPTED hash
    # ENCRYPTED variables is unique for every repository, so you cant use my one, create you rclone config https://rclone.org/drive/#making-your-own-client-id
    rclone_config: "ENCRYPTED[74e5076c8fff6753e7dd621d4ddef5c6ecfd819335568a52daef8a4a305fb04e62325fd85e4bc759f5f0fb6c11e8d59b]"
    bot_api: "ENCRYPTED[43f84ed742f7ff41bf9b0b0d4e57616b94fae52ae936c59488af7dacc6b3e170a8e9286823fde85235d1c923a30f6578]"
    tg_id: "ENCRYPTED[6e8f38c44b5906dcb2bf1aff078248323416766f8f0e00a1a04ca5cccf87b62a97feca4112f4da13891f1eda639362ac]"

task:
    name: derpfest # Project name
    timeout_in: 120m # Otherwise it will timeout at 60m automatically, 120m highest in free account
    container:
      dockerfile: Dockerfile # It has built-in setup environment + repo, aria2, rclone, pigz, username ci, and email ci@ci.ci [You can use your own docker image if you want, or you can use this one too!]
      cpu: 8  #8 or less cpu for dummy build, 8 cpu for the final build, 8cpu highest for free accounts. Don't try to use more than 8cpu as free user, you may get blocked by ci.
      memory: 32G # So that we can have ram when needed, 32G highest

    download_ccache_background_script: # To download ccache in background
     - ./download_ccache # Ccache download script
    sync_script: # To sync source
      - ./sync # Source sync script
    monitor_background_script: # To monitor ccache and machine status every minute, runs in background
      - ./monitor # Monitor script
    build_script: # Actual build script foreground
      - ./build # Build script to run
    upload_ccache_script: # Upload ccache to cloud foreground
      - ./upload_ccache # Ccache uploading script
